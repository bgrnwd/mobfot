{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MobFot","text":"<p>An unofficial Python client for the FotMob API</p> <p> </p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install mobfot\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from mobfot import MobFot\nclient = MobFot()\nclient.get_matches_by_date(\"20221205\")\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Feel free to open an issue or submit a pull request.</p>"},{"location":"#license","title":"License","text":"<p>MIT \u00a9 Brian Greenwood</p>"},{"location":"reference/","title":"Reference","text":"Source code in <code>mobfot/client.py</code> <pre><code>class MobFot:\n    BASE_URL = \"https://www.fotmob.com/api\"\n    LOGGER = getLogger(__name__)\n\n    def __init__(\n        self, proxies: Optional[dict] = None, logging_level: Optional[str] = \"WARNING\"\n    ) -&gt; None:\n        SESSION = requests.Session()\n        if proxies:\n            SESSION.proxies.update(proxies)\n        CACHE_SESSION = CacheControl(SESSION)\n\n        if logging_level:\n            if logging_level.upper() in [\n                \"DEBUG\",\n                \"INFO\",\n                \"WARNING\",\n                \"ERROR\",\n                \"CRITICAL\",\n            ]:\n                self.LOGGER.setLevel(getLevelName(logging_level.upper()))\n            else:\n                print(f\"Logging level {logging_level} not recognized!\")\n\n        self.session = CACHE_SESSION\n        self.matches_url = f\"{self.BASE_URL}/matches?\"\n        self.leagues_url = f\"{self.BASE_URL}/leagues?\"\n        self.teams_url = f\"{self.BASE_URL}/teams?\"\n        self.player_url = f\"{self.BASE_URL}/playerData?\"\n        self.match_details_url = f\"{self.BASE_URL}/matchDetails?\"\n        self.search_url = f\"{self.BASE_URL}/searchData?\"\n        self.tv_listing_url = f\"{self.BASE_URL}/tvlisting?\"\n        self.tv_listings_url = f\"{self.BASE_URL}/tvlistings?\"\n\n    def _check_date(self, date: str) -&gt; Union[re.Match, None]:\n        \"\"\"Makes sure dates are formatted correctly YYYY-MM-DD\n\n        Args:\n            date (str): The date (YYYY-MM-DD)\n\n        Returns:\n            Union[re.Match, None]:\n        \"\"\"\n        pattern = re.compile(r\"(20\\d{2})(\\d{2})(\\d{2})\")\n        return pattern.match(date)\n\n    def _check_season(self, season: str) -&gt; Union[re.Match, None]:\n        \"\"\"Makes sure the season is formatted correctly 20WX-20YZ\n\n        Args:\n            season (str): The season (20WX/20YZ)\n\n        Returns:\n            Union[re.Match, None]:\n        \"\"\"\n        pattern = re.compile(r\"(20\\d{2})/(20\\d{2})\")\n        return pattern.match(season)\n\n    def _execute_query(self, url: str) -&gt; dict:\n        \"\"\"Executes a single query against the API\n\n        Args:\n            url (str): URL\n\n        Returns:\n            dict: The response from the API\n        \"\"\"\n        response = self.session.get(url)\n        response.raise_for_status()\n        self.LOGGER.debug(response)\n        return response.json()\n\n    def get_matches_by_date(\n        self, date: str, time_zone: str = \"America/New_York\"\n    ) -&gt; dict:\n        \"\"\"Gets all the matches for a given date\n\n        Args:\n            date (str): The date (YYYY-MM-DD)\n            time_zone (str, optional): The time zone. Defaults to \"America/New_York\".\n\n        Returns:\n            dict: A dictionary of all the matches for a particular date\n        \"\"\"\n        if self._check_date(date) is not None:\n            url = f\"{self.matches_url}date={date}&amp;timezone={time_zone}\"\n            return self._execute_query(url)\n        return {}\n\n    def get_matches_by_league(self, id: int) -&gt; dict:\n        \"\"\"Gets matches for a given league\n\n        Args:\n            id (int): The league ID\n\n        Returns:\n            dict: Matches for a specified league\n        \"\"\"\n        return self.get_league(id=id)[\"matches\"]\n\n    def get_league(\n        self,\n        id: int,\n        tab: str = \"overview\",\n        type: str = \"league\",\n        time_zone: str = \"America/New_York\",\n        season: str = \"\",\n    ) -&gt; dict:\n        \"\"\"Gets information about a given league\n\n        Args:\n            id (int): The league ID\n            tab (str, optional): What tab of information to get. Defaults to \"overview\".\n            type (str, optional): Defaults to \"league\".\n            time_zone (str, optional): The time zone. Defaults to \"America/New_York\".\n            season (str, optional): The season we want, the format must be `20WX/20YZ`. Defaults to \"\" (it will show current season)\n        Returns:\n            dict: The response from the API\n        \"\"\"\n        if season == \"\" or self._check_season(season) is not None:\n            url = f\"{self.leagues_url}id={id}&amp;tab={tab}&amp;type={type}&amp;timezone={time_zone}&amp;season={season}\"\n            return self._execute_query(url)\n        return {}\n\n    def get_team(\n        self,\n        id: int,\n        tab: str = \"overview\",\n        type: str = \"league\",\n        time_zone: str = \"America/New_York\",\n    ) -&gt; dict:\n        \"\"\"Gets information about a given team\n\n        Args:\n            id (int): The team ID\n            tab (str, optional): What tab of information to get. Defaults to \"overview\".\n            type (str, optional): Defaults to \"league\".\n            time_zone (str, optional): The time zone. Defaults to \"America/New_York\".\n\n        Returns:\n            dict: The response from the API\n        \"\"\"\n        url = f\"{self.teams_url}id={id}&amp;tab={tab}&amp;type={type}&amp;timezone={time_zone}\"\n        return self._execute_query(url)\n\n    def get_player(self, id: int) -&gt; dict:\n        \"\"\"Gets information about a given player\n\n        Args:\n            id (int): The player ID\n\n        Returns:\n            dict: The response from the API\n        \"\"\"\n        url = f\"{self.player_url}id={id}\"\n        return self._execute_query(url)\n\n    def get_match_details(self, match_id: int) -&gt; dict:\n        \"\"\"Gets information about a given match\n\n        Args:\n            match_id (int): The match ID\n\n        Returns:\n            dict: The response from the API\n        \"\"\"\n        url = f\"{self.match_details_url}matchId={match_id}\"\n        return self._execute_query(url)\n\n    def get_match_tv_listing(self, match_id: int, country_code: str = \"GB\") -&gt; dict:\n        \"\"\"Gets the TV listing for a given match\n\n        Args:\n            match_id (int): The match ID\n            country_code (str, optional): The country code. Defaults to \"GB\".\n\n        Returns:\n            dict: The response from the API\n        \"\"\"\n        url = f\"{self.tv_listing_url}matchId={match_id}&amp;countryCode={country_code}\"\n        return self._execute_query(url)\n\n    def get_tv_listings_country(self, country_code: str = \"GB\") -&gt; dict:\n        \"\"\"Get TV listing information by country\n\n        Args:\n            country_code (str, optional): The country code. Defaults to \"GB\".\n\n        Returns:\n            dict: The response from the API\n        \"\"\"\n        url = f\"{self.tv_listings_url}countryCode={country_code}\"\n        return self._execute_query(url)\n\n    def search(self, term: str, user_language: str = \"en-GB,en\") -&gt; dict:\n        \"\"\"Searches FotMob for a given term\n\n        Args:\n            term (str): The term to search fr\n            user_language (str, optional): The language. Defaults to \"en-GB,en\".\n\n        Returns:\n            dict: The response from the API\n        \"\"\"\n        search_term = urllib.parse.quote_plus(term)\n        url = f\"{self.search_url}term={search_term}&amp;userLanguage={user_language}\"\n        return self._execute_query(url)\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.get_league","title":"<code>get_league(id, tab='overview', type='league', time_zone='America/New_York', season='')</code>","text":"<p>Gets information about a given league</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The league ID</p> required <code>tab</code> <code>str</code> <p>What tab of information to get. Defaults to \"overview\".</p> <code>'overview'</code> <code>type</code> <code>str</code> <p>Defaults to \"league\".</p> <code>'league'</code> <code>time_zone</code> <code>str</code> <p>The time zone. Defaults to \"America/New_York\".</p> <code>'America/New_York'</code> <code>season</code> <code>str</code> <p>The season we want, the format must be <code>20WX/20YZ</code>. Defaults to \"\" (it will show current season)</p> <code>''</code> <p>Returns:     dict: The response from the API</p> Source code in <code>mobfot/client.py</code> <pre><code>def get_league(\n    self,\n    id: int,\n    tab: str = \"overview\",\n    type: str = \"league\",\n    time_zone: str = \"America/New_York\",\n    season: str = \"\",\n) -&gt; dict:\n    \"\"\"Gets information about a given league\n\n    Args:\n        id (int): The league ID\n        tab (str, optional): What tab of information to get. Defaults to \"overview\".\n        type (str, optional): Defaults to \"league\".\n        time_zone (str, optional): The time zone. Defaults to \"America/New_York\".\n        season (str, optional): The season we want, the format must be `20WX/20YZ`. Defaults to \"\" (it will show current season)\n    Returns:\n        dict: The response from the API\n    \"\"\"\n    if season == \"\" or self._check_season(season) is not None:\n        url = f\"{self.leagues_url}id={id}&amp;tab={tab}&amp;type={type}&amp;timezone={time_zone}&amp;season={season}\"\n        return self._execute_query(url)\n    return {}\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.get_match_details","title":"<code>get_match_details(match_id)</code>","text":"<p>Gets information about a given match</p> <p>Parameters:</p> Name Type Description Default <code>match_id</code> <code>int</code> <p>The match ID</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The response from the API</p> Source code in <code>mobfot/client.py</code> <pre><code>def get_match_details(self, match_id: int) -&gt; dict:\n    \"\"\"Gets information about a given match\n\n    Args:\n        match_id (int): The match ID\n\n    Returns:\n        dict: The response from the API\n    \"\"\"\n    url = f\"{self.match_details_url}matchId={match_id}\"\n    return self._execute_query(url)\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.get_match_tv_listing","title":"<code>get_match_tv_listing(match_id, country_code='GB')</code>","text":"<p>Gets the TV listing for a given match</p> <p>Parameters:</p> Name Type Description Default <code>match_id</code> <code>int</code> <p>The match ID</p> required <code>country_code</code> <code>str</code> <p>The country code. Defaults to \"GB\".</p> <code>'GB'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The response from the API</p> Source code in <code>mobfot/client.py</code> <pre><code>def get_match_tv_listing(self, match_id: int, country_code: str = \"GB\") -&gt; dict:\n    \"\"\"Gets the TV listing for a given match\n\n    Args:\n        match_id (int): The match ID\n        country_code (str, optional): The country code. Defaults to \"GB\".\n\n    Returns:\n        dict: The response from the API\n    \"\"\"\n    url = f\"{self.tv_listing_url}matchId={match_id}&amp;countryCode={country_code}\"\n    return self._execute_query(url)\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.get_matches_by_date","title":"<code>get_matches_by_date(date, time_zone='America/New_York')</code>","text":"<p>Gets all the matches for a given date</p> <p>Parameters:</p> Name Type Description Default <code>date</code> <code>str</code> <p>The date (YYYY-MM-DD)</p> required <code>time_zone</code> <code>str</code> <p>The time zone. Defaults to \"America/New_York\".</p> <code>'America/New_York'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of all the matches for a particular date</p> Source code in <code>mobfot/client.py</code> <pre><code>def get_matches_by_date(\n    self, date: str, time_zone: str = \"America/New_York\"\n) -&gt; dict:\n    \"\"\"Gets all the matches for a given date\n\n    Args:\n        date (str): The date (YYYY-MM-DD)\n        time_zone (str, optional): The time zone. Defaults to \"America/New_York\".\n\n    Returns:\n        dict: A dictionary of all the matches for a particular date\n    \"\"\"\n    if self._check_date(date) is not None:\n        url = f\"{self.matches_url}date={date}&amp;timezone={time_zone}\"\n        return self._execute_query(url)\n    return {}\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.get_matches_by_league","title":"<code>get_matches_by_league(id)</code>","text":"<p>Gets matches for a given league</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The league ID</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Matches for a specified league</p> Source code in <code>mobfot/client.py</code> <pre><code>def get_matches_by_league(self, id: int) -&gt; dict:\n    \"\"\"Gets matches for a given league\n\n    Args:\n        id (int): The league ID\n\n    Returns:\n        dict: Matches for a specified league\n    \"\"\"\n    return self.get_league(id=id)[\"matches\"]\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.get_player","title":"<code>get_player(id)</code>","text":"<p>Gets information about a given player</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The player ID</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The response from the API</p> Source code in <code>mobfot/client.py</code> <pre><code>def get_player(self, id: int) -&gt; dict:\n    \"\"\"Gets information about a given player\n\n    Args:\n        id (int): The player ID\n\n    Returns:\n        dict: The response from the API\n    \"\"\"\n    url = f\"{self.player_url}id={id}\"\n    return self._execute_query(url)\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.get_team","title":"<code>get_team(id, tab='overview', type='league', time_zone='America/New_York')</code>","text":"<p>Gets information about a given team</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The team ID</p> required <code>tab</code> <code>str</code> <p>What tab of information to get. Defaults to \"overview\".</p> <code>'overview'</code> <code>type</code> <code>str</code> <p>Defaults to \"league\".</p> <code>'league'</code> <code>time_zone</code> <code>str</code> <p>The time zone. Defaults to \"America/New_York\".</p> <code>'America/New_York'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The response from the API</p> Source code in <code>mobfot/client.py</code> <pre><code>def get_team(\n    self,\n    id: int,\n    tab: str = \"overview\",\n    type: str = \"league\",\n    time_zone: str = \"America/New_York\",\n) -&gt; dict:\n    \"\"\"Gets information about a given team\n\n    Args:\n        id (int): The team ID\n        tab (str, optional): What tab of information to get. Defaults to \"overview\".\n        type (str, optional): Defaults to \"league\".\n        time_zone (str, optional): The time zone. Defaults to \"America/New_York\".\n\n    Returns:\n        dict: The response from the API\n    \"\"\"\n    url = f\"{self.teams_url}id={id}&amp;tab={tab}&amp;type={type}&amp;timezone={time_zone}\"\n    return self._execute_query(url)\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.get_tv_listings_country","title":"<code>get_tv_listings_country(country_code='GB')</code>","text":"<p>Get TV listing information by country</p> <p>Parameters:</p> Name Type Description Default <code>country_code</code> <code>str</code> <p>The country code. Defaults to \"GB\".</p> <code>'GB'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The response from the API</p> Source code in <code>mobfot/client.py</code> <pre><code>def get_tv_listings_country(self, country_code: str = \"GB\") -&gt; dict:\n    \"\"\"Get TV listing information by country\n\n    Args:\n        country_code (str, optional): The country code. Defaults to \"GB\".\n\n    Returns:\n        dict: The response from the API\n    \"\"\"\n    url = f\"{self.tv_listings_url}countryCode={country_code}\"\n    return self._execute_query(url)\n</code></pre>"},{"location":"reference/#mobfot.client.MobFot.search","title":"<code>search(term, user_language='en-GB,en')</code>","text":"<p>Searches FotMob for a given term</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>str</code> <p>The term to search fr</p> required <code>user_language</code> <code>str</code> <p>The language. Defaults to \"en-GB,en\".</p> <code>'en-GB,en'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The response from the API</p> Source code in <code>mobfot/client.py</code> <pre><code>def search(self, term: str, user_language: str = \"en-GB,en\") -&gt; dict:\n    \"\"\"Searches FotMob for a given term\n\n    Args:\n        term (str): The term to search fr\n        user_language (str, optional): The language. Defaults to \"en-GB,en\".\n\n    Returns:\n        dict: The response from the API\n    \"\"\"\n    search_term = urllib.parse.quote_plus(term)\n    url = f\"{self.search_url}term={search_term}&amp;userLanguage={user_language}\"\n    return self._execute_query(url)\n</code></pre>"}]}